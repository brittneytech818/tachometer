{"version":3,"file":"runner.js","sourceRoot":"","sources":["../src/runner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nrequire('source-map-support').install();\nrequire('chromedriver');\n\nimport { AddressInfo, Server } from 'net';\nimport * as path from 'path';\nimport * as fs from 'fs-extra';\n\nimport {Builder, WebDriver} from 'selenium-webdriver';\nimport * as systeminformation from 'systeminformation';\n\nimport Koa = require('koa');\nimport mount = require('koa-mount');\nimport Router = require('koa-router');\nimport serve = require('koa-static');\nimport websockify = require('koa-websocket');\nimport commandLineArgs = require('command-line-args');\nimport { promisify } from 'util';\n\nconst util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\ninterface Run {\n  id: string;\n  name: string;\n  deferred: Deferred<BenchmarkResult[]>;\n}\n\n// interface RunResult {\n//   type: 'result';\n//   id: string;\n//   benchmarks: BenchmarkResult[];\n// }\n\ninterface BenchmarkResult {\n  name: string;\n  runs: number[];\n}\n\n// TODO: add date, time, git branch name, etc\ninterface RunData {\n  name: string;\n  date: Date;\n  benchmarks: BenchmarkResult[];\n  cpu: {\n    manufacturer: string,\n    model: string,\n    family: string,\n    speed: string,\n    cores: number,\n  };\n  load: {\n    average: number,\n    current: number,\n  };\n  battery: {\n    hasBattery: boolean,\n    connected: boolean,\n  };\n  memory: {\n    total: number,\n    free: number,\n    used: number,\n    active: number,\n    available: number,\n  };\n}\n\nconst getGitInfo = async () => {\n  try {\n    const { stdout, stderr } = await exec('git', ['rev-parse', 'HEAD']);\n    console.log({ stdout, stderr });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst getRunData = async (name: string, benchmarkResults: BenchmarkResult[]): Promise<RunData> => {\n  getGitInfo();\n  const battery = (await systeminformation.battery()) as any as {\n    hasbattery: boolean,\n    acconnected: boolean,\n  };\n  const cpu = await systeminformation.cpu();\n  const currentLoad = await systeminformation.currentLoad();\n  const memory = await systeminformation.mem();\n  return {\n    name,\n    date: new Date(),\n    benchmarks: benchmarkResults,\n    cpu: {\n      manufacturer: cpu.manufacturer,\n      model: cpu.model,\n      family: cpu.family,\n      speed: cpu.speed,\n      cores: cpu.cores,\n    },\n    load: {\n      average: currentLoad.avgload,\n      current: currentLoad.currentload,\n    },\n    battery: {\n      hasBattery: battery.hasbattery,\n      connected: battery.acconnected,\n    },\n    memory: {\n      total: memory.total,\n      free: memory.free,\n      used: memory.used,\n      active: memory.active,\n      available: memory.available,\n    }\n  };\n};\n\n\nclass Deferred<T> {\n  readonly promise: Promise<T>;\n  resolve!: (value: T) => void;\n  reject!: (error: Error) => void;\n\n  constructor() {\n    this.promise = new Promise<T>((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nclass Runner {\n\n  static async create() {\n    // Create a function to open a browser window for the benchmark\n    const driver = await new Builder().forBrowser('chrome').build();\n    return new Runner(driver);\n  }\n\n\n  // Even though we're running benchmarks in series, we give each run an id and\n  // make sure that we associate result messages with the correct run. This\n  // prevents any spurrious race conditions and enables one runner to launch\n  // multiple clients eventually.\n  readonly pendingRuns = new Map<string, Run>();\n  currentRunId = 0;\n  driver: WebDriver;\n  server: Server;\n\n  constructor(driver: WebDriver) {\n    this.driver = driver;\n    // Enable WebSockets on the server\n    const app = websockify(new Koa());\n\n    // Serve the benchmark client static files\n    const benchmarkClientDir = path.resolve(__dirname, '../../../');\n    app.use(mount('/client/lit-html/', serve(benchmarkClientDir, {\n      index: 'index.html',\n    })));\n\n    // Set up WebSocket handler for the browser to send results to\n    const wsRouter = new Router();\n    wsRouter.all('/test', async (context) => {\n      context.websocket.on('message', async (message: string) => {\n        const data = JSON.parse(message);\n        // console.log({data});\n\n        // Simple diagnostic that the client code loaded correctly\n        if (data.type === 'start') {\n          console.log(`Benchmark running: ${this.pendingRuns.get(data.id)}`);\n          return;\n        }\n\n        if (data.type === 'result') {\n          console.log(`Benchmark complete: ${data.id}`);\n          const runObject = this.pendingRuns.get(data.id);\n          if (runObject === undefined) {\n            console.error('unknown run', data.id);\n            return;\n          }\n          runObject.deferred.resolve(data.benchmarks);\n          return;\n        }\n\n        console.log('unknown message', data);\n      });\n    });\n    app.ws.use(wsRouter.routes());\n\n    this.server = app.listen();\n    const port = (this.server.address() as AddressInfo).port;\n    console.log(`lit-html benchmark server listening at ${port}`);\n  }\n\n  async openBenchmarkInBrowser (name: string, id: string) {\n    const port = (this.server.address() as AddressInfo).port;\n    const url = `http://localhost:${port}/client/lit-html/benchmark/benchmarks/${name}/index.html?id=${id}`;\n    await this.driver.get(url);\n  }\n\n  async runBenchmark(name: string): Promise<BenchmarkResult[]> {\n    const id = (this.currentRunId++).toString();\n    const run: Run = {\n      id,\n      name,\n      deferred: new Deferred(),\n    };\n    this.pendingRuns.set(id, run);\n    await this.openBenchmarkInBrowser(name, id);\n    return run.deferred.promise;\n  }\n\n  async stop() {\n    await Promise.all([\n      this.driver.close(),\n      promisify(this.server.close.bind(this.server))(),\n    ]);\n  }\n}\n\n\nconst saveRun = async (benchmarkName: string, newData: any) => {\n  // console.log(process.cwd());\n  let data: any;\n  let contents: string|undefined;\n  try {\n    contents = await fs.readFile(`./benchmark/benchmarks/${benchmarkName}/runs.json`, 'utf-8');\n  } catch (e) {\n  }\n  if (contents !== undefined && contents.trim() !== '') {\n    data = JSON.parse(contents);\n  }\n  if (data === undefined) {\n    data = {};\n  }\n  if (data.runs === undefined) {\n    data.runs = [];\n  }\n  data.runs.push(newData);\n  fs.writeFile(`./benchmark/benchmarks/${benchmarkName}/runs.json`, JSON.stringify(data));\n};\n\nconst run = async (name: string) => {\n  const runner = await Runner.create();\n  const results = await runner.runBenchmark(name);\n  console.log(JSON.stringify(results));\n  const data = await getRunData(name, results);\n  console.log({data});\n  await saveRun(name, data);\n  runner.stop();\n};\n\nconst optionDefinitions: commandLineArgs.OptionDefinition[] = [\n  { name: 'name', type: String, defaultOption: true },\n  { name: 'save', alias: 'S', type: Boolean},\n  { name: 'verbose', alias: 'v', type: Boolean },\n];\nconst args = commandLineArgs(optionDefinitions);\nconsole.log({args});\nrun('recurse');\n"]}